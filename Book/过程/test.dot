digraph graphname {
    准备代码片段和一个运行代码的环境 ->读一段代码
    读一段代码 -> 按空格分离
    按空格分离 -> 得到一个字符序列
    得到一个字符序列->标记序列访问index为1 -> 访问第index个符号
    访问第index个符号 -> 判断符号是为右边结束符吗
    判断符号是为右边结束符吗 -> 不是右边结束符
    判断符号是为右边结束符吗 -> 是右边结束符
    不是右边结束符 -> 将单个字符压入代码堆栈 -> index序号加1
    index序号加1 -> 超出序列个数
    index序号加1 -> 不是最后一个字符
    不是最后一个字符 -> 访问第index个符号
    是右边结束符-> 从代码栈取出一个元素
    从代码栈取出一个元素 -> 判断是不是左边终结符
    判断是不是左边终结符 -> 是左边终结符
    判断是不是左边终结符 -> 非左边终结符
    是左边终结符 -> 将数据缓存区的操作符应用于操作数
    非左边终结符 -> 压入数据缓存区堆栈
    计算的结果为一个字符 -> 将单个字符压入代码堆栈
    压入数据缓存区堆栈 -> 从代码栈取出一个元素
    超出序列个数 -> 返回代码栈的数据 -> 程序结束
    将数据缓存区的操作符应用于操作数 -> 判断操作符类型 
    判断操作符类型 -> 基本算术符号 -> 直接计算结果 -> 计算的结果为一个字符
    判断操作符类型 -> 定义匿名函数
    判断操作符类型 -> 调用自定义函数 -> 从环境中去查找定义 -> 将参数传入函数中计算
    判断操作符类型 -> 特殊操作定义函数 -> 在环境中绑定函数名和对应代码块
    判断操作符类型 -> 特殊操作赋值 -> 在环境中绑定变量名和值
    判断操作符类型 -> 获取变量值 -> 在环境中找到变量名对应的值


}
